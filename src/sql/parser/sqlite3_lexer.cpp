#line 2 "sqlite3_lexer.cpp"

#line 4 "sqlite3_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 118
#define YY_END_OF_BUFFER 119
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[443] =
    {   0,
        0,    0,  119,  117,    1,    2,    2,  117,  117,  104,
      103,  117,   93,   94,  100,   98,   96,   99,   95,  101,
       89,   89,  117,   97,  111,  107,  109,   91,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
      117,  117,  105,  102,  117,  117,  117,    1,    2,  113,
        0,   87,    0,   88,   89,    3,   89,   89,    0,    0,
       92,  115,  112,  114,  108,  110,  116,   91,   84,   84,
       84,   84,    7,   84,    0,    0,    0,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   38,   84,   84,   41,   45,   84,   84,
       84,   50,   84,   54,   55,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,    0,    0,   86,    0,   85,  106,   84,    0,
        0,   89,    0,   89,   89,   91,   84,   84,    6,    8,
       84,    0,    0,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   29,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       47,   84,   84,   51,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   70,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
        0,    0,   84,   84,   84,    0,   84,   84,   12,   13,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   26,
       84,   28,   84,   84,   32,   84,   84,   84,   84,   37,
       84,   84,   84,   84,   84,   84,   48,   84,   84,   53,
       56,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   68,   84,   84,   72,   74,   75,   84,   84,
       84,   84,   84,   81,   84,   84,   90,    4,   84,   84,
       84,   84,   14,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   33,   84,   84,   84,   84,   84,

       42,   84,   84,   84,   49,   84,   84,   84,   84,   60,
       61,   84,   84,   84,   84,   84,   67,   84,   71,   84,
       84,   84,   84,   79,   84,   82,   84,    5,   84,   84,
       84,   84,   84,   84,   18,   84,   84,   84,   25,   84,
       30,   31,   34,   84,   84,   39,   84,   84,   44,   46,
       84,   84,   84,   84,   84,   63,   84,   84,   84,   69,
       84,   84,   77,   78,   84,   84,   84,   10,   11,   15,
       84,   84,   84,   22,   84,   84,   84,   84,   36,   84,
       84,   52,   84,   84,   59,   84,   64,   84,   84,   84,
       84,   80,   83,   84,   16,   84,   84,   84,   24,   27,

       84,   84,   84,   84,   84,   84,   65,   66,   84,   84,
       84,   84,   84,   84,   84,   35,   40,   43,   57,   58,
       84,   73,   76,   84,   17,   84,   84,   23,   62,   84,
       84,   84,   84,   19,   20,    9,   84,   84,   84,   84,
       21,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   20,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   35,
       51,    1,   52,    1,   53,   54,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   35,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   35,    1,   79,    1,   80,    1,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,    1,    1,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   84,
       84,   84,   84,   84,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[85] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    1,
        1,    1,    1,    1,    1,    4,    4,    4,    4,    4,
        4,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    6,    1,    4,    4,    4,    4,    4,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    1,
        1,    6,    6,    6
    } ;

static const flex_int16_t yy_base[451] =
    {   0,
        0,    0,  319, 2240,  316,   82,   84,  289,  289, 2240,
     2240,  285, 2240, 2240, 2240, 2240, 2240, 2240,   71,  277,
       75,   79,    0, 2240,   77,  265,   79,  260,  126,   62,
      185,   74,  122,   80,   85,   28,  239,   96,  113,  159,
      180,  190,  232,  162,  225,  287,  257,  140,  294,  168,
      224,  206,  170, 2240,  158,  151,  146,  217,  112, 2240,
      210,  201,  192,  175,  272, 2240,  274,  329,  110,    0,
        0, 2240, 2240, 2240, 2240, 2240, 2240,   99,   48,  198,
      252,  303,  309,  299,  100,   94,   92,  317,  323,  320,
      357,  330,  337,  386,  353,  366,  389,  370,  152,  392,

      378,  422,  270,   57,  417,  425,  452,  444,  435,  456,
      449,  469,  465,  281,  291,  482,  473,  491,  524,  528,
      533,  540,  563,  548,  566,  553,  599,  605,  558,  500,
      608,  611,    0,  108, 2240,   97,   95, 2240,  349,   61,
       55,  639,  172,  194,    0,  267,  625,  617,  395,  406,
      634,   46,   38,  519,  675,  647,  641,  682,  685,  667,
      715,  697,  705,  702,  723,  496,  689,  711,  726,  732,
      745,  755,  766,  774,  763,  781,  792,  787,  796,  807,
      570,  803,  784,  815,  835,  830,  838,  849,  857,  844,
      653,  866,  875,  870,  863,  878,  921,  907,  577,  914,

      903,  925,  940,  933,  936,  945,  928,  957,  982,  993,
      104,   26,  986,  974,  998,   15, 1003, 1008,  582,  588,
     1014, 1017, 1023, 1029, 1044, 1049, 1063, 1052, 1069,  752,
     1076,  760, 1079, 1084,  810, 1091, 1095, 1101, 1109,  820,
     1127, 1136, 1122, 1152, 1145, 1158,  892, 1163, 1175,  898,
      953, 1168, 1171, 1182, 1202, 1208, 1205, 1195, 1213, 1227,
     1244, 1254,  962, 1247, 1263, 1233, 1098, 1130, 1259, 1274,
     1278, 1271, 1289, 1198, 1309, 1312, 2240, 1224, 1282, 1320,
     1339, 1347, 1295, 1336, 1350, 1343, 1353, 1361, 1373, 1368,
     1358, 1407, 1394, 1403, 1324, 1411, 1416, 1427, 1437, 1434,

     1378, 1446, 1458, 1442, 1387, 1467, 1461, 1454, 1484, 1431,
     1464, 1493, 1512, 1505, 1501, 1531, 1476, 1509, 1487, 1535,
     1540, 1543, 1550, 1515, 1546, 1521, 1562, 1528, 1592, 1596,
     1601, 1607, 1610, 1613, 1558, 1625, 1628, 1622, 1571, 1631,
     1574, 1634, 1637, 1665, 1683, 1641, 1674, 1689, 1648, 1651,
     1699, 1705, 1711, 1677, 1702, 1660, 1716, 1723, 1734, 1694,
     1737, 1750, 1719, 1727, 1759, 1767, 1754, 1731, 1744, 1747,
     1790, 1805, 1770, 1762, 1820, 1826, 1812, 1823, 1776, 1838,
     1832, 1782, 1851, 1859, 1795, 1871, 1798, 1856, 1881, 1875,
     1841, 1848, 1865, 1897, 1868, 1905, 1932, 1929, 1885, 1891,

     1938, 1941, 1926, 1952, 1946, 1967, 1900, 1919, 1977, 1988,
     1999, 1993, 2007, 2010, 2015, 1957, 1970, 1974, 1985, 1996,
     2040, 2003, 2018, 2058, 2021, 2061, 2069, 2026, 2031, 2072,
     2066, 2088, 2084, 2037, 2092, 2044, 2113, 2105, 2095, 2121,
     2098, 2240, 2205, 2211, 2214, 2217, 2223, 2229, 2233, 2235
    } ;

static const flex_int16_t yy_def[451] =
    {   0,
      442,    1,  442,  442,  442,  442,  442,  442,  443,  442,
      442,  444,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  445,  442,  442,  442,  442,  442,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      447,  448,  442,  442,  442,  442,  442,  442,  442,  442,
      443,  442,  444,  442,  442,  442,  442,  442,  442,  449,
      445,  442,  442,  442,  442,  442,  442,  442,  446,  446,
      446,  446,  446,  446,  442,  442,  442,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,

      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  450,  447,  442,  448,  442,  442,  446,  442,
      442,  442,  442,  442,  449,  442,  446,  446,  446,  446,
      446,  442,  442,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,

      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      450,  442,  446,  446,  446,  442,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  442,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,

      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,

      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,    0,  442,  442,  442,  442,  442,  442,  442,  442
    } ;

static const flex_int16_t yy_nxt[2325] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   36,   38,   39,   40,   41,   42,
       43,   36,   44,   45,   46,   47,   48,   49,   50,   36,
       51,    4,   36,   52,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   36,
       44,   45,   46,   47,   48,   49,   50,   36,   53,   54,
        4,   55,   56,   57,   59,   59,   59,   59,   65,   65,
       67,   88,   68,   68,   67,   79,   68,   68,   72,   73,

       74,   76,   77,   94,   69,  100,  139,   95,   69,   85,
       86,   87,  277,  101,   59,   59,  146,  146,  216,  102,
       88,  103,  143,   70,  143,  109,   79,  144,  144,   85,
       86,   87,   94,   69,  100,  212,   95,   69,   85,   86,
       87,  139,  101,   85,   86,   87,  110,  102,  136,  103,
      137,   70,   80,   81,  109,   85,   86,   87,   96,  135,
       97,   85,   86,   87,   82,   98,   85,   86,   87,   83,
       99,   84,  153,  130,  152,  110,  133,   85,   86,   87,
       79,   80,   81,   63,  111,  168,   96,  119,   97,  144,
      144,  120,   82,   98,   85,   86,   87,   83,   99,   84,

       64,  121,  130,   85,   86,   87,   61,   85,   86,   87,
       89,  144,  144,  111,  168,   62,  119,   90,   58,  112,
      120,   85,   86,   87,   91,  113,  141,   92,  114,  121,
       93,  140,  115,   85,   86,   87,  116,  147,  139,   89,
       85,   86,   87,   85,   86,   87,   90,  112,  138,   85,
       86,   87,   91,  113,  122,   92,  114,  117,   93,  137,
      115,   85,   86,   87,  116,  147,   85,   86,   87,  104,
      105,   85,   86,   87,  118,  135,  106,  107,   78,   85,
       86,   87,  108,  122,  146,  146,  117,   75,   66,   65,
       65,  142,  142,   64,   62,  127,  148,  128,  104,  105,

      129,   69,  118,   69,  106,  107,   85,   86,   87,  174,
      108,   60,  123,   85,   86,   87,  124,   58,  442,  125,
       85,   86,   87,  127,  148,  128,  131,  132,  129,  126,
       69,  149,   69,   85,   86,   87,  150,  174,   85,   86,
       87,  123,  442,  151,   67,  124,   68,   68,  125,  156,
      442,   85,   86,   87,  442,  131,  132,  126,   69,  159,
      149,  154,   85,   86,   87,  150,  155,  442,   85,   86,
       87,  151,   85,   86,   87,   85,   86,   87,  156,  160,
       85,   86,   87,  442,   85,   86,   87,   69,  159,  154,
       85,   86,   87,  157,  155,  158,  164,  167,   85,   86,

       87,   85,   86,   87,   85,   86,   87,  160,  442,  165,
      442,   85,   86,   87,  171,  442,  161,  166,   85,   86,
       87,  157,  162,  158,  164,  169,  167,  442,  170,  163,
       85,   86,   87,  442,   85,   86,   87,  165,   85,   86,
       87,  442,  171,  442,  442,  161,  166,   85,   86,   87,
      162,   85,   86,   87,  169,  175,  170,  163,  172,   85,
       86,   87,  176,  442,  173,  442,  442,   85,   86,   87,
       85,   86,   87,   85,   86,   87,   85,   86,   87,  442,
      177,  442,  180,  175,  181,  178,  172,   85,   86,   87,
      176,  182,  173,  183,  442,  179,  442,  442,   85,   86,

       87,  185,  442,   85,   86,   87,   85,   86,   87,  177,
      180,  186,  181,  184,  178,  187,   85,   86,   87,  182,
      188,  183,  442,  179,  189,   85,   86,   87,  442,  185,
       85,   86,   87,   85,   86,   87,  442,   85,   86,   87,
      186,  184,  208,  187,  442,  442,   85,   86,   87,  188,
       85,   86,   87,  189,   85,   86,   87,  190,  192,  193,
      442,  442,  191,   85,   86,   87,  217,  442,  194,  196,
      208,  195,   85,   86,   87,  442,  198,   85,   86,   87,
      197,   85,   86,   87,  199,  201,  190,  192,  193,  200,
      191,  207,  442,  442,  217,  202,  194,  196,  203,  195,

       85,   86,   87,  442,  198,   85,   86,   87,  197,   85,
       86,   87,  199,  201,   85,   86,   87,  442,  200,  442,
      207,   85,   86,   87,  202,  204,  203,  442,  442,   85,
       86,   87,  205,  206,   85,   86,   87,  209,  442,   85,
       86,   87,  442,  442,   85,   86,   87,   85,   86,   87,
      214,   85,   86,   87,  204,  210,  142,  142,   85,   86,
       87,  205,  206,   85,   86,   87,  209,  213,   69,   85,
       86,   87,  442,  215,  221,  442,  442,  222,  442,  214,
       85,   86,   87,  210,  256,  442,   85,   86,   87,   85,
       86,   87,   85,   86,   87,  213,  442,   69,   85,   86,

       87,  215,  218,  221,  219,  222,   85,   86,   87,  226,
      225,  442,  223,  256,  233,   85,   86,   87,  442,  220,
      442,  442,   85,   86,   87,  224,  229,  442,   85,   86,
       87,  218,  230,  219,   85,   86,   87,  226,  442,  225,
      227,  223,  442,  233,  228,  442,  231,  220,   85,   86,
       87,  442,  232,  224,  234,  229,   85,   86,   87,  442,
      442,  230,  235,   85,   86,   87,   85,   86,   87,  227,
       85,   86,   87,  228,  231,  236,  442,  442,   85,   86,
       87,  232,  234,   85,   86,   87,   85,   86,   87,  237,
      235,  238,   85,   86,   87,  239,   85,   86,   87,  442,

      240,  442,  241,  236,   85,   86,   87,   85,   86,   87,
      242,  248,  442,   85,   86,   87,  442,  237,  442,  238,
      442,  243,  442,  442,  239,  245,   85,   86,   87,  240,
      241,  244,  247,   85,   86,   87,   85,   86,   87,  242,
      248,   85,   86,   87,   85,   86,   87,   85,   86,   87,
      243,  442,  246,  249,  245,   85,   86,   87,  442,  244,
      442,  247,   85,   86,   87,   85,   86,   87,   85,   86,
       87,  250,  251,   85,   86,   87,  253,   85,   86,   87,
      246,  249,  252,  442,   85,   86,   87,  255,   85,   86,
       87,   85,   86,   87,  254,  257,   85,   86,   87,  250,

      251,   85,   86,   87,  258,  253,  259,  260,  442,  442,
      252,   85,   86,   87,  261,  255,   85,   86,   87,   85,
       86,   87,  254,  442,  257,   85,   86,   87,  442,  442,
       85,   86,   87,  258,  259,  260,  264,  442,   85,   86,
       87,  442,  261,  266,   85,   86,   87,   85,   86,   87,
      265,   85,   86,   87,  262,  442,   85,   86,   87,   85,
       86,   87,  442,  267,  263,  264,  272,  442,  442,  268,
      271,  266,  269,   85,   86,   87,  442,  270,  265,   85,
       86,   87,  442,  262,   85,   86,   87,  442,   85,   86,
       87,  267,  263,  442,  272,   85,   86,   87,  268,  271,

      269,  273,   85,   86,   87,  270,   85,   86,   87,   85,
       86,   87,  442,  279,   85,   86,   87,   85,   86,   87,
      274,   85,   86,   87,  275,  276,   85,   86,   87,  273,
      278,  280,  281,  282,   85,   86,   87,  442,   85,   86,
       87,  279,  284,   85,   86,   87,  442,  442,  274,  283,
      442,  442,  275,  442,  276,   85,   86,   87,  278,  285,
      280,  281,  282,   85,   86,   87,  442,   85,   86,   87,
      442,  284,  442,  286,   85,   86,   87,  283,  288,   85,
       86,   87,  442,  442,   85,   86,   87,  285,  287,   85,
       86,   87,  442,  442,  290,   85,   86,   87,   85,   86,

       87,  286,  442,  442,   85,   86,   87,  288,  289,  292,
       85,   86,   87,  291,  442,  442,  287,  442,  442,  293,
      295,  442,  290,  442,  296,   85,   86,   87,  294,  442,
       85,   86,   87,   85,   86,   87,  289,  442,  292,  442,
      297,  291,  298,  442,   85,   86,   87,  293,  442,  295,
       85,   86,   87,  296,  442,  442,  294,   85,   86,   87,
       85,   86,   87,  442,  300,   85,   86,   87,  297,  299,
      301,  298,   85,   86,   87,  442,   85,   86,   87,   85,
       86,   87,   85,   86,   87,  302,  442,  303,  442,  442,
       85,   86,   87,  300,  304,  305,  442,  299,  301,  442,

      308,  307,  442,   85,   86,   87,  442,  309,   85,   86,
       87,   85,   86,   87,  302,  303,  442,   85,   86,   87,
      306,  442,  304,  442,  305,  442,   85,   86,   87,  308,
      307,  310,  442,   85,   86,   87,  309,  311,  314,   85,
       86,   87,  442,  313,   85,   86,   87,  312,  306,   85,
       86,   87,   85,   86,   87,  442,   85,   86,   87,  442,
      310,  442,  442,   85,   86,   87,  311,  314,  442,  315,
      316,  313,  320,  442,  318,  312,   85,   86,   87,   85,
       86,   87,  317,   85,   86,   87,   85,   86,   87,   85,
       86,   87,  319,  442,   85,   86,   87,  315,  442,  316,

      320,  442,  324,  318,  321,   85,   86,   87,   85,   86,
       87,  317,  442,  442,   85,   86,   87,  442,  442,  322,
      328,  319,  323,  442,  442,   85,   86,   87,   85,   86,
       87,  324,  321,  442,  325,   85,   86,   87,  326,  442,
       85,   86,   87,  442,   85,   86,   87,  322,  328,  442,
      323,  327,   85,   86,   87,   85,   86,   87,  329,   85,
       86,   87,  325,   85,   86,   87,  442,  326,  330,  442,
       85,   86,   87,  442,  442,  331,   85,   86,   87,  327,
      332,  442,  335,  333,  442,  334,  329,  339,  442,  442,
       85,   86,   87,   85,   86,   87,  442,  330,  442,  336,

      442,   85,   86,   87,  331,   85,   86,   87,  332,  337,
      338,  335,  333,  334,  442,  442,  339,   85,   86,   87,
       85,   86,   87,  341,   85,   86,   87,  336,   85,   86,
       87,   85,   86,   87,   85,   86,   87,  337,  338,   85,
       86,   87,   85,   86,   87,  340,  342,  442,  442,   85,
       86,   87,  341,  343,   85,   86,   87,  442,  345,   85,
       86,   87,  442,  344,  442,  442,  346,  347,   85,   86,
       87,  348,  442,  340,  342,   85,   86,   87,  350,  442,
      442,  343,  353,  442,   85,   86,   87,  345,   85,   86,
       87,  344,   85,   86,   87,  346,  347,   85,   86,   87,

      348,  442,  349,  351,  442,  352,  350,  442,   85,   86,
       87,  353,   85,   86,   87,   85,   86,   87,   85,   86,
       87,  442,  355,   85,   86,   87,  354,   85,   86,   87,
      349,  351,  357,  352,  358,   85,   86,   87,  442,   85,
       86,   87,   85,   86,   87,   85,   86,   87,   85,   86,
       87,  355,  356,  360,  354,  442,  359,   85,   86,   87,
      442,  357,  442,  358,  442,   85,   86,   87,   85,   86,
       87,  365,  363,  442,   85,   86,   87,  361,  362,  364,
      356,  360,   85,   86,   87,  359,   85,   86,   87,  442,
       85,   86,   87,   85,   86,   87,   85,   86,   87,  442,

      365,  363,   85,   86,   87,  361,  362,  366,  364,   85,
       86,   87,   85,   86,   87,  442,   85,   86,   87,  367,
      442,   85,   86,   87,   85,   86,   87,   85,   86,   87,
      369,   85,   86,   87,  368,  366,  370,  371,  372,   85,
       86,   87,  442,   85,   86,   87,  442,  375,  367,  442,
      442,  376,   85,   86,   87,   85,   86,   87,  377,  369,
      442,  442,  368,  442,  442,  370,  371,  372,  442,  373,
      442,  442,  374,   85,   86,   87,  375,   85,   86,   87,
      376,  442,   85,   86,   87,  442,  442,  377,   85,   86,
       87,   85,   86,   87,   85,   86,   87,  373,  378,  380,

      374,  442,  442,   85,   86,   87,   85,   86,   87,   85,
       86,   87,   85,   86,   87,   85,   86,   87,   85,   86,
       87,  379,   85,   86,   87,  381,  385,  378,  380,   85,
       86,   87,   85,   86,   87,  382,  442,  442,  383,  442,
      386,   85,   86,   87,  384,  387,   85,   86,   87,  379,
      388,  442,  442,  381,  385,   85,   86,   87,   85,   86,
       87,  389,  390,  382,   85,   86,   87,  383,  386,  442,
       85,   86,   87,  384,  387,   85,   86,   87,  391,  388,
       85,   86,   87,   85,   86,   87,   85,   86,   87,  442,
      389,  390,   85,   86,   87,  392,  394,   85,   86,   87,

       85,   86,   87,  442,   85,   86,   87,  391,   85,   86,
       87,  393,   85,   86,   87,   85,   86,   87,   85,   86,
       87,  442,  397,  392,  394,   85,   86,   87,   85,   86,
       87,   85,   86,   87,  395,   85,   86,   87,  396,  393,
       85,   86,   87,   85,   86,   87,  398,  442,   85,   86,
       87,   85,   86,   87,  399,  442,  400,   85,   86,   87,
      442,  401,  395,   85,   86,   87,  442,  396,  403,  442,
      410,   85,   86,   87,  442,  398,   85,   86,   87,   85,
       86,   87,  402,  399,  400,  442,   85,   86,   87,  401,
      404,  442,  442,   85,   86,   87,  403,  405,  406,  410,

      407,   85,   86,   87,   85,   86,   87,   85,   86,   87,
      402,  442,  442,   85,   86,   87,  408,  409,  404,   85,
       86,   87,   85,   86,   87,  405,  411,  406,  407,   85,
       86,   87,   85,   86,   87,  442,  442,   85,   86,   87,
       85,   86,   87,  412,  408,  409,   85,   86,   87,   85,
       86,   87,   85,   86,   87,  411,   85,   86,   87,  442,
      413,  442,   85,   86,   87,  415,   85,   86,   87,  416,
      417,  412,   85,   86,   87,  418,  414,  420,   85,   86,
       87,   85,   86,   87,  442,  442,   85,   86,   87,  413,
      419,  442,  442,  415,  442,  442,  421,  442,  416,  417,

       85,   86,   87,  418,  414,  442,  420,   85,   86,   87,
       85,   86,   87,   85,   86,   87,  423,  442,  419,   85,
       86,   87,   85,   86,   87,  421,  422,   85,   86,   87,
      442,  442,  426,   85,   86,   87,  424,  425,   85,   86,
       87,  442,  442,  427,  428,  423,  442,  442,   85,   86,
       87,   85,   86,   87,  422,   85,   86,   87,   85,   86,
       87,  426,  442,  442,  424,  425,   85,   86,   87,   85,
       86,   87,  427,  428,   85,   86,   87,   85,   86,   87,
       85,   86,   87,  429,   85,   86,   87,  430,   85,   86,
       87,   85,   86,   87,  442,  434,   85,   86,   87,   85,

       86,   87,   85,   86,   87,  431,  432,   85,   86,   87,
      433,  429,   85,   86,   87,  442,  430,  435,   85,   86,
       87,   85,   86,   87,  434,   85,   86,   87,  436,  442,
      439,  442,  440,  431,  432,  437,  442,  442,  433,   85,
       86,   87,   85,   86,   87,  442,  435,   85,   86,   87,
       85,   86,   87,   85,   86,   87,  436,  438,  442,  439,
      440,  441,  442,  437,  442,   85,   86,   87,  442,   85,
       86,   87,  442,   85,   86,   87,   85,   86,   87,   85,
       86,   87,  442,  442,  442,  438,   85,   86,   87,  441,
      442,  442,  442,  442,   85,   86,   87,  442,  442,  442,

      442,  442,   85,   86,   87,   61,  442,   61,   61,   61,
       61,   63,  442,   63,   63,   63,   63,   71,   71,   79,
       79,   79,   79,  134,  442,  134,  134,  134,  134,  136,
      442,  136,  136,  136,  136,  145,  145,  211,  211,    3,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,

      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442
    } ;

static const flex_int16_t yy_chk[2325] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    6,    6,    7,    7,   19,   19,
       21,   30,   21,   21,   22,  216,   22,   22,   25,   25,

       25,   27,   27,   32,   21,   34,  212,   32,   22,   36,
       36,   36,  211,   34,   59,   59,   78,   78,  153,   34,
       30,   35,   69,   21,   69,   38,  152,   69,   69,   79,
       79,   79,   32,   21,   34,  141,   32,   22,  104,  104,
      104,  140,   34,   30,   30,   30,   39,   34,  137,   35,
      136,   21,   29,   29,   38,   32,   32,   32,   33,  134,
       33,   34,   34,   34,   29,   33,   35,   35,   35,   29,
       33,   29,   87,   48,   86,   39,   50,   38,   38,   38,
       85,   29,   29,   64,   40,   99,   33,   44,   33,  143,
      143,   44,   29,   33,   39,   39,   39,   29,   33,   29,

       63,   44,   48,   33,   33,   33,   62,   29,   29,   29,
       31,  144,  144,   40,   99,   61,   44,   31,   58,   41,
       44,   48,   48,   48,   31,   41,   57,   31,   42,   44,
       31,   56,   42,   99,   99,   99,   42,   80,   55,   31,
       40,   40,   40,   44,   44,   44,   31,   41,   53,   50,
       50,   50,   31,   41,   45,   31,   42,   43,   31,   52,
       42,   41,   41,   41,   42,   80,   31,   31,   31,   37,
       37,   42,   42,   42,   43,   51,   37,   37,   28,   80,
       80,   80,   37,   45,  146,  146,   43,   26,   20,   65,
       65,   67,   67,   12,    9,   47,   81,   47,   37,   37,

       47,   65,   43,   67,   37,   37,   45,   45,   45,  103,
       37,    8,   46,   43,   43,   43,   46,    5,    3,   46,
       37,   37,   37,   47,   81,   47,   49,   49,   47,   46,
       65,   82,   67,   81,   81,   81,   83,  103,   47,   47,
       47,   46,    0,   84,   68,   46,   68,   68,   46,   90,
        0,  103,  103,  103,    0,   49,   49,   46,   68,   92,
       82,   88,  114,  114,  114,   83,   89,    0,   46,   46,
       46,   84,  115,  115,  115,   49,   49,   49,   90,   93,
       84,   84,   84,    0,   82,   82,   82,   68,   92,   88,
       83,   83,   83,   91,   89,   91,   95,   98,   88,   88,

       88,   90,   90,   90,   89,   89,   89,   93,    0,   96,
        0,   92,   92,   92,  101,    0,   94,   97,   93,   93,
       93,   91,   94,   91,   95,  100,   98,    0,  100,   94,
      139,  139,  139,    0,   95,   95,   95,   96,   91,   91,
       91,    0,  101,    0,    0,   94,   97,   96,   96,   96,
       94,   98,   98,   98,  100,  105,  100,   94,  102,  101,
      101,  101,  106,    0,  102,    0,    0,   94,   94,   94,
       97,   97,   97,  100,  100,  100,  149,  149,  149,    0,
      107,    0,  108,  105,  109,  107,  102,  150,  150,  150,
      106,  110,  102,  111,    0,  107,    0,    0,  105,  105,

      105,  113,    0,  102,  102,  102,  106,  106,  106,  107,
      108,  116,  109,  112,  107,  117,  109,  109,  109,  110,
      118,  111,    0,  107,  118,  108,  108,  108,    0,  113,
      111,  111,  111,  107,  107,  107,    0,  110,  110,  110,
      116,  112,  130,  117,    0,    0,  113,  113,  113,  118,
      112,  112,  112,  118,  117,  117,  117,  119,  120,  120,
        0,    0,  119,  116,  116,  116,  154,    0,  120,  121,
      130,  120,  118,  118,  118,    0,  122,  166,  166,  166,
      121,  130,  130,  130,  122,  124,  119,  120,  120,  123,
      119,  129,    0,    0,  154,  125,  120,  121,  126,  120,

      154,  154,  154,    0,  122,  119,  119,  119,  121,  120,
      120,  120,  122,  124,  121,  121,  121,    0,  123,    0,
      129,  122,  122,  122,  125,  127,  126,    0,    0,  124,
      124,  124,  127,  128,  126,  126,  126,  131,    0,  129,
      129,  129,    0,    0,  123,  123,  123,  125,  125,  125,
      148,  181,  181,  181,  127,  132,  142,  142,  199,  199,
      199,  127,  128,  219,  219,  219,  131,  147,  142,  220,
      220,  220,    0,  151,  156,    0,    0,  157,    0,  148,
      127,  127,  127,  132,  191,    0,  128,  128,  128,  131,
      131,  131,  132,  132,  132,  147,    0,  142,  148,  148,

      148,  151,  155,  156,  155,  157,  147,  147,  147,  160,
      159,    0,  158,  191,  167,  151,  151,  151,    0,  155,
        0,    0,  157,  157,  157,  158,  162,    0,  156,  156,
      156,  155,  163,  155,  191,  191,  191,  160,    0,  159,
      161,  158,    0,  167,  161,    0,  164,  155,  160,  160,
      160,    0,  165,  158,  168,  162,  155,  155,  155,    0,
        0,  163,  169,  158,  158,  158,  159,  159,  159,  161,
      167,  167,  167,  161,  164,  170,    0,    0,  162,  162,
      162,  165,  168,  164,  164,  164,  163,  163,  163,  171,
      169,  172,  168,  168,  168,  173,  161,  161,  161,    0,

      174,    0,  175,  170,  165,  165,  165,  169,  169,  169,
      176,  183,    0,  170,  170,  170,    0,  171,    0,  172,
        0,  177,    0,    0,  173,  179,  171,  171,  171,  174,
      175,  178,  182,  230,  230,  230,  172,  172,  172,  176,
      183,  232,  232,  232,  175,  175,  175,  173,  173,  173,
      177,    0,  180,  184,  179,  174,  174,  174,    0,  178,
        0,  182,  176,  176,  176,  183,  183,  183,  178,  178,
      178,  185,  186,  177,  177,  177,  188,  179,  179,  179,
      180,  184,  187,    0,  182,  182,  182,  190,  180,  180,
      180,  235,  235,  235,  189,  192,  184,  184,  184,  185,

      186,  240,  240,  240,  193,  188,  194,  195,    0,    0,
      187,  186,  186,  186,  196,  190,  185,  185,  185,  187,
      187,  187,  189,    0,  192,  190,  190,  190,    0,    0,
      188,  188,  188,  193,  194,  195,  198,    0,  189,  189,
      189,    0,  196,  201,  195,  195,  195,  192,  192,  192,
      200,  194,  194,  194,  197,    0,  193,  193,  193,  196,
      196,  196,    0,  202,  197,  198,  207,    0,    0,  203,
      206,  201,  204,  247,  247,  247,    0,  205,  200,  250,
      250,  250,    0,  197,  201,  201,  201,    0,  198,  198,
      198,  202,  197,    0,  207,  200,  200,  200,  203,  206,

      204,  208,  197,  197,  197,  205,  202,  202,  202,  207,
      207,  207,    0,  214,  204,  204,  204,  205,  205,  205,
      209,  203,  203,  203,  209,  210,  206,  206,  206,  208,
      213,  215,  217,  218,  251,  251,  251,    0,  208,  208,
      208,  214,  222,  263,  263,  263,    0,    0,  209,  221,
        0,    0,  209,    0,  210,  214,  214,  214,  213,  223,
      215,  217,  218,  209,  209,  209,    0,  213,  213,  213,
        0,  222,    0,  224,  210,  210,  210,  221,  226,  215,
      215,  215,    0,    0,  217,  217,  217,  223,  225,  218,
      218,  218,    0,    0,  228,  221,  221,  221,  222,  222,

      222,  224,    0,    0,  223,  223,  223,  226,  227,  231,
      224,  224,  224,  229,    0,    0,  225,    0,    0,  233,
      236,    0,  228,    0,  237,  225,  225,  225,  234,    0,
      226,  226,  226,  228,  228,  228,  227,    0,  231,    0,
      238,  229,  239,    0,  227,  227,  227,  233,    0,  236,
      229,  229,  229,  237,    0,    0,  234,  231,  231,  231,
      233,  233,  233,    0,  242,  234,  234,  234,  238,  241,
      243,  239,  236,  236,  236,    0,  237,  237,  237,  267,
      267,  267,  238,  238,  238,  244,    0,  245,    0,    0,
      239,  239,  239,  242,  246,  248,    0,  241,  243,    0,

      253,  252,    0,  243,  243,  243,    0,  254,  241,  241,
      241,  268,  268,  268,  244,  245,    0,  242,  242,  242,
      249,    0,  246,    0,  248,    0,  245,  245,  245,  253,
      252,  255,    0,  244,  244,  244,  254,  256,  259,  246,
      246,  246,    0,  258,  248,  248,  248,  257,  249,  252,
      252,  252,  253,  253,  253,    0,  249,  249,  249,    0,
      255,    0,    0,  254,  254,  254,  256,  259,    0,  260,
      261,  258,  266,    0,  264,  257,  258,  258,  258,  274,
      274,  274,  262,  255,  255,  255,  257,  257,  257,  256,
      256,  256,  265,    0,  259,  259,  259,  260,    0,  261,

      266,    0,  272,  264,  269,  278,  278,  278,  260,  260,
      260,  262,    0,    0,  266,  266,  266,    0,    0,  270,
      279,  265,  271,    0,    0,  261,  261,  261,  264,  264,
      264,  272,  269,    0,  273,  262,  262,  262,  275,    0,
      269,  269,  269,    0,  265,  265,  265,  270,  279,    0,
      271,  276,  272,  272,  272,  270,  270,  270,  280,  271,
      271,  271,  273,  279,  279,  279,    0,  275,  281,    0,
      273,  273,  273,    0,    0,  282,  283,  283,  283,  276,
      284,    0,  287,  285,    0,  286,  280,  291,    0,    0,
      275,  275,  275,  276,  276,  276,    0,  281,    0,  288,

        0,  280,  280,  280,  282,  295,  295,  295,  284,  289,
      290,  287,  285,  286,    0,    0,  291,  284,  284,  284,
      281,  281,  281,  293,  286,  286,  286,  288,  282,  282,
      282,  285,  285,  285,  287,  287,  287,  289,  290,  291,
      291,  291,  288,  288,  288,  292,  294,    0,    0,  290,
      290,  290,  293,  296,  289,  289,  289,    0,  298,  301,
      301,  301,    0,  297,    0,    0,  299,  300,  305,  305,
      305,  302,    0,  292,  294,  293,  293,  293,  304,    0,
        0,  296,  308,    0,  294,  294,  294,  298,  292,  292,
      292,  297,  296,  296,  296,  299,  300,  297,  297,  297,

      302,    0,  303,  306,    0,  307,  304,    0,  298,  298,
      298,  308,  310,  310,  310,  300,  300,  300,  299,  299,
      299,    0,  312,  304,  304,  304,  309,  302,  302,  302,
      303,  306,  314,  307,  315,  308,  308,  308,    0,  303,
      303,  303,  307,  307,  307,  311,  311,  311,  306,  306,
      306,  312,  313,  318,  309,    0,  316,  317,  317,  317,
        0,  314,    0,  315,    0,  309,  309,  309,  319,  319,
      319,  325,  322,    0,  312,  312,  312,  320,  321,  323,
      313,  318,  315,  315,  315,  316,  314,  314,  314,    0,
      318,  318,  318,  313,  313,  313,  324,  324,  324,    0,

      325,  322,  326,  326,  326,  320,  321,  327,  323,  328,
      328,  328,  316,  316,  316,    0,  320,  320,  320,  329,
        0,  321,  321,  321,  322,  322,  322,  325,  325,  325,
      331,  323,  323,  323,  330,  327,  332,  333,  334,  335,
      335,  335,    0,  327,  327,  327,    0,  338,  329,    0,
        0,  338,  339,  339,  339,  341,  341,  341,  340,  331,
        0,    0,  330,    0,    0,  332,  333,  334,    0,  336,
        0,    0,  337,  329,  329,  329,  338,  330,  330,  330,
      338,    0,  331,  331,  331,    0,    0,  340,  332,  332,
      332,  333,  333,  333,  334,  334,  334,  336,  344,  347,

      337,    0,    0,  338,  338,  338,  336,  336,  336,  337,
      337,  337,  340,  340,  340,  342,  342,  342,  343,  343,
      343,  345,  346,  346,  346,  348,  354,  344,  347,  349,
      349,  349,  350,  350,  350,  351,    0,    0,  352,    0,
      355,  356,  356,  356,  353,  357,  344,  344,  344,  345,
      358,    0,    0,  348,  354,  347,  347,  347,  354,  354,
      354,  359,  361,  351,  345,  345,  345,  352,  355,    0,
      348,  348,  348,  353,  357,  360,  360,  360,  362,  358,
      351,  351,  351,  355,  355,  355,  352,  352,  352,    0,
      359,  361,  353,  353,  353,  365,  367,  357,  357,  357,

      363,  363,  363,    0,  358,  358,  358,  362,  364,  364,
      364,  366,  368,  368,  368,  359,  359,  359,  361,  361,
      361,    0,  373,  365,  367,  369,  369,  369,  370,  370,
      370,  362,  362,  362,  371,  367,  367,  367,  372,  366,
      365,  365,  365,  374,  374,  374,  375,    0,  366,  366,
      366,  373,  373,  373,  376,    0,  377,  379,  379,  379,
        0,  378,  371,  382,  382,  382,    0,  372,  381,    0,
      391,  371,  371,  371,    0,  375,  385,  385,  385,  387,
      387,  387,  380,  376,  377,    0,  372,  372,  372,  378,
      383,    0,    0,  377,  377,  377,  381,  384,  386,  391,

      388,  375,  375,  375,  378,  378,  378,  376,  376,  376,
      380,    0,    0,  381,  381,  381,  389,  390,  383,  380,
      380,  380,  391,  391,  391,  384,  394,  386,  388,  392,
      392,  392,  383,  383,  383,    0,    0,  388,  388,  388,
      384,  384,  384,  396,  389,  390,  393,  393,  393,  395,
      395,  395,  386,  386,  386,  394,  390,  390,  390,    0,
      397,    0,  389,  389,  389,  398,  399,  399,  399,  401,
      402,  396,  400,  400,  400,  403,  397,  405,  394,  394,
      394,  407,  407,  407,    0,    0,  396,  396,  396,  397,
      404,    0,    0,  398,    0,    0,  406,    0,  401,  402,

      408,  408,  408,  403,  397,    0,  405,  403,  403,  403,
      398,  398,  398,  397,  397,  397,  410,    0,  404,  401,
      401,  401,  402,  402,  402,  406,  409,  405,  405,  405,
        0,    0,  413,  404,  404,  404,  411,  412,  416,  416,
      416,    0,    0,  414,  415,  410,    0,    0,  406,  406,
      406,  417,  417,  417,  409,  418,  418,  418,  409,  409,
      409,  413,    0,    0,  411,  412,  419,  419,  419,  410,
      410,  410,  414,  415,  412,  412,  412,  420,  420,  420,
      411,  411,  411,  421,  422,  422,  422,  424,  413,  413,
      413,  414,  414,  414,    0,  431,  415,  415,  415,  423,

      423,  423,  425,  425,  425,  426,  427,  428,  428,  428,
      430,  421,  429,  429,  429,    0,  424,  432,  434,  434,
      434,  421,  421,  421,  431,  436,  436,  436,  433,    0,
      438,    0,  439,  426,  427,  435,    0,    0,  430,  424,
      424,  424,  426,  426,  426,    0,  432,  431,  431,  431,
      427,  427,  427,  430,  430,  430,  433,  437,    0,  438,
      439,  440,    0,  435,    0,  433,  433,  433,    0,  432,
      432,  432,    0,  435,  435,  435,  439,  439,  439,  441,
      441,  441,    0,    0,    0,  437,  438,  438,  438,  440,
        0,    0,    0,    0,  437,  437,  437,    0,    0,    0,

        0,    0,  440,  440,  440,  443,    0,  443,  443,  443,
      443,  444,    0,  444,  444,  444,  444,  445,  445,  446,
      446,  446,  446,  447,    0,  447,  447,  447,  447,  448,
        0,  448,  448,  448,  448,  449,  449,  450,  450,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,

      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442
    } ;

static const flex_int16_t yy_rule_linenum[118] =
    {   0,
       78,   79,   81,  102,  103,  104,  105,  106,  107,  108,
      109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
      119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
      149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
      159,  160,  161,  162,  163,  164,  165,  166,  167,  168,
      169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
      179,  180,  181,  183,  184,  185,  186,  187,  188,  189,
      190,  191,  193,  194,  195,  196,  197,  198,  199,  200,

      201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
      211,  212,  213,  214,  215,  216,  218
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sqlite3_lexer.ll"
#line 2 "sqlite3_lexer.ll"
#include <string>
#include "ParserDriver.h"
#include "sqlite3_parser.hpp"
#line 1186 "sqlite3_lexer.cpp"
#define YY_NO_UNISTD_H 1
#line 12 "sqlite3_lexer.ll"
	#define TOKEN(n) sqlb::parser::parser::symbol_type(sqlb::parser::parser::token::TOK_##n, yytext, loc)

	std::string unquote_string(std::string s, char quote_char)
	{
		if(s.size() < 2)
			return s;

		if(quote_char == '[')
		{
			if(s.front() == '[' && s.back() == ']')
				s = s.substr(1, s.size()-2);
		} else {
			if(s.front() == quote_char && s.back() == quote_char)
			{
				s = s.substr(1, s.size()-2);
				auto pos = s.npos;
				while((pos = s.find(std::string(2, quote_char))) != s.npos)
					s = s.replace(pos, 2, std::string(1, quote_char));
			}
		}

		return s;
	}
#line 1212 "sqlite3_lexer.cpp"
#line 55 "sqlite3_lexer.ll"
	/* TODO Add $ bind parameters */
	// Code run each time a pattern is matched.
	#define YY_USER_ACTION loc.columns(yyleng);
#line 1217 "sqlite3_lexer.cpp"
#line 1218 "sqlite3_lexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */
#line 67 "sqlite3_lexer.ll"



#line 71 "sqlite3_lexer.ll"
	// Shortcut to the location held by the driver
	sqlb::parser::location& loc = drv.location;

	// Code run each time yylex is called.
	loc.step();


#line 1555 "sqlite3_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 443 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 442 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 118 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 118 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 119 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 78 "sqlite3_lexer.ll"
loc.step();
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 79 "sqlite3_lexer.ll"
loc.lines(yyleng); loc.step();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 81 "sqlite3_lexer.ll"
{
			int c;

			for(;;)
			{
				while((c = yyinput(yyscanner)) != '*' && c != EOF)
					;    /* eat up text of comment */

				if(c == '*')
				{
					while((c = yyinput(yyscanner)) == '*')
						;
					if(c == '/')
						break;    /* found the end */
				}

				if(c == EOF)
					throw sqlb::parser::parser::syntax_error(loc, "EOF in comment");
			}
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 102 "sqlite3_lexer.ll"
return TOKEN(ABORT);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 103 "sqlite3_lexer.ll"
return TOKEN(ACTION);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 104 "sqlite3_lexer.ll"
return TOKEN(AND);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 105 "sqlite3_lexer.ll"
return TOKEN(AS);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 106 "sqlite3_lexer.ll"
return TOKEN(ASC);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 107 "sqlite3_lexer.ll"
return TOKEN(AUTOINCREMENT);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 108 "sqlite3_lexer.ll"
return TOKEN(BETWEEN);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 109 "sqlite3_lexer.ll"
return TOKEN(CASCADE);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 110 "sqlite3_lexer.ll"
return TOKEN(CASE);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 111 "sqlite3_lexer.ll"
return TOKEN(CAST);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 112 "sqlite3_lexer.ll"
return TOKEN(CHECK);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 113 "sqlite3_lexer.ll"
return TOKEN(COLLATE);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 114 "sqlite3_lexer.ll"
return TOKEN(CONFLICT);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 115 "sqlite3_lexer.ll"
return TOKEN(CONSTRAINT);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 116 "sqlite3_lexer.ll"
return TOKEN(CREATE);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 117 "sqlite3_lexer.ll"
return TOKEN(CURRENT_DATE);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 118 "sqlite3_lexer.ll"
return TOKEN(CURRENT_TIME);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 119 "sqlite3_lexer.ll"
return TOKEN(CURRENT_TIMESTAMP);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 120 "sqlite3_lexer.ll"
return TOKEN(DEFAULT);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 121 "sqlite3_lexer.ll"
return TOKEN(DEFERRABLE);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 122 "sqlite3_lexer.ll"
return TOKEN(DEFERRED);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 123 "sqlite3_lexer.ll"
return TOKEN(DELETE);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 124 "sqlite3_lexer.ll"
return TOKEN(DESC);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 125 "sqlite3_lexer.ll"
return TOKEN(DISTINCT);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 126 "sqlite3_lexer.ll"
return TOKEN(ELSE);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 127 "sqlite3_lexer.ll"
return TOKEN(END);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 128 "sqlite3_lexer.ll"
return TOKEN(ESCAPE);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 129 "sqlite3_lexer.ll"
return TOKEN(EXISTS);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 130 "sqlite3_lexer.ll"
return TOKEN(FAIL);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 131 "sqlite3_lexer.ll"
return TOKEN(FALSE);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 132 "sqlite3_lexer.ll"
return TOKEN(FILTER);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 133 "sqlite3_lexer.ll"
return TOKEN(FOLLOWING);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 134 "sqlite3_lexer.ll"
return TOKEN(FOREIGN);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 135 "sqlite3_lexer.ll"
return TOKEN(GLOB);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 136 "sqlite3_lexer.ll"
return TOKEN(IF);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 137 "sqlite3_lexer.ll"
return TOKEN(IGNORE);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 138 "sqlite3_lexer.ll"
return TOKEN(IMMEDIATE);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 139 "sqlite3_lexer.ll"
return TOKEN(IN);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 140 "sqlite3_lexer.ll"
return TOKEN(INDEX);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 141 "sqlite3_lexer.ll"
return TOKEN(INITIALLY);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 142 "sqlite3_lexer.ll"
return TOKEN(INSERT);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 143 "sqlite3_lexer.ll"
return TOKEN(IS);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 144 "sqlite3_lexer.ll"
return TOKEN(ISNULL);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 145 "sqlite3_lexer.ll"
return TOKEN(KEY);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 146 "sqlite3_lexer.ll"
return TOKEN(LIKE);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 147 "sqlite3_lexer.ll"
return TOKEN(MATCH);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 148 "sqlite3_lexer.ll"
return TOKEN(NO);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 149 "sqlite3_lexer.ll"
return TOKEN(NOT);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 150 "sqlite3_lexer.ll"
return TOKEN(NOTNULL);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 151 "sqlite3_lexer.ll"
return TOKEN(NULL);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 152 "sqlite3_lexer.ll"
return TOKEN(ON);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 153 "sqlite3_lexer.ll"
return TOKEN(OR);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 154 "sqlite3_lexer.ll"
return TOKEN(OVER);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 155 "sqlite3_lexer.ll"
return TOKEN(PARTITION);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 156 "sqlite3_lexer.ll"
return TOKEN(PRECEDING);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 157 "sqlite3_lexer.ll"
return TOKEN(PRIMARY);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 158 "sqlite3_lexer.ll"
return TOKEN(RAISE);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 159 "sqlite3_lexer.ll"
return TOKEN(RANGE);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 160 "sqlite3_lexer.ll"
return TOKEN(REFERENCES);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 161 "sqlite3_lexer.ll"
return TOKEN(REGEXP);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 162 "sqlite3_lexer.ll"
return TOKEN(REPLACE);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 163 "sqlite3_lexer.ll"
return TOKEN(RESTRICT);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 164 "sqlite3_lexer.ll"
return TOKEN(ROLLBACK);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 165 "sqlite3_lexer.ll"
return TOKEN(ROWID);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 166 "sqlite3_lexer.ll"
return TOKEN(ROWS);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 167 "sqlite3_lexer.ll"
return TOKEN(SELECT);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 168 "sqlite3_lexer.ll"
return TOKEN(SET);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 169 "sqlite3_lexer.ll"
return TOKEN(TABLE);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 170 "sqlite3_lexer.ll"
return TOKEN(TEMP);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 171 "sqlite3_lexer.ll"
return TOKEN(TEMPORARY);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 172 "sqlite3_lexer.ll"
return TOKEN(THEN);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 173 "sqlite3_lexer.ll"
return TOKEN(TRUE);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 174 "sqlite3_lexer.ll"
return TOKEN(UNBOUNDED);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 175 "sqlite3_lexer.ll"
return TOKEN(UNIQUE);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 176 "sqlite3_lexer.ll"
return TOKEN(UPDATE);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 177 "sqlite3_lexer.ll"
return TOKEN(USING);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 178 "sqlite3_lexer.ll"
return TOKEN(VIRTUAL);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 179 "sqlite3_lexer.ll"
return TOKEN(WHEN);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 180 "sqlite3_lexer.ll"
return TOKEN(WHERE);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 181 "sqlite3_lexer.ll"
return TOKEN(WITHOUT);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 183 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_IDENTIFIER(yytext, loc);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 184 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_IDENTIFIER(unquote_string(yytext, '`'), loc);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 185 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_IDENTIFIER(unquote_string(yytext, '['), loc);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 186 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_QUOTEDLITERAL(unquote_string(yytext, '"'), loc);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 187 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_STRINGLITERAL(yytext, loc);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 188 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_NUMERIC(yytext, loc);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 189 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BLOBLITERAL(yytext, loc);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 190 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BINDPARAMETER(yytext, loc);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 191 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BINDPARAMETER(yytext, loc);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 193 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_LPAREN(loc);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 194 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_RPAREN(loc);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 195 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_DOT(loc);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 196 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_COMMA(loc);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 197 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_SEMI(loc);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 198 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_PLUS(loc);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 199 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_MINUS(loc);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 200 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_STAR(loc);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 201 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_SLASH(loc);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 202 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_TILDE(loc);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 203 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_AMPERSAND(loc);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 204 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_PERCENT(loc);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 205 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BITOR(loc);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 206 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_OROP(loc);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 207 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_EQUAL(loc);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 208 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_EQUAL2(loc);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 209 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_GREATER(loc);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 210 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_GREATEREQUAL(loc);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 211 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_LOWER(loc);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 212 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_LOWEREQUAL(loc);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 213 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_UNEQUAL(loc);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 214 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_UNEQUAL2(loc);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 215 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BITWISELEFT(loc);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 216 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_BITWISERIGHT(loc);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 218 "sqlite3_lexer.ll"
throw sqlb::parser::parser::syntax_error(loc, "Invalid character: " + std::string(yytext));
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 220 "sqlite3_lexer.ll"
return sqlb::parser::parser::make_EOF(loc);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 222 "sqlite3_lexer.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2245 "sqlite3_lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 443 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 443 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 442);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 222 "sqlite3_lexer.ll"


namespace sqlb
{
namespace parser
{

void ParserDriver::begin_scan()
{
	yylex_init(&scanner);
	location.initialize();
	yyset_debug(trace_scanner, scanner);
	buffer = yy_scan_string(source.c_str(), scanner);
}

void ParserDriver::end_scan()
{
	yy_delete_buffer(buffer, scanner);
	yylex_destroy(scanner);
}

}
}

